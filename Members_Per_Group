## GROUP HEALTH: Members by # groups

## Finds the number of members in 1, 2, and/or 3 groups per week


WITH ActiveMembers AS ( -- gives us members that are actively placed in groups

SELECT
    gm.userId as userId,
    gm.id as groupMemberId,
    g.id as groupId,
    #GROUP_CONCAT(g.name,' ') as groupName,
    CONCAT(u.firstName, ' ',u.lastName) as memberName,
    DATE(gm.startDate) as groupStartDate,
    DATE(gm.endDate) as groupEndDate, 
    COUNT(DISTINCT gm.id) as currentActiveGroups
    
    
FROM 
    usss u 
join grme gm on gm.userId = u.id 
join mem m on m.userId = u.id 
join grps g on g.id = gm.groupId

where
    gm.startDate IS NOT NULL and -- were placed in a group at some point
    gm.endDate IS NULL and -- still active in the groups
    gm.isFacilitator IS NOT TRUE and -- only members 
    gm.isTempMember IS NOT TRUE

group by 
    gm.userId    

),

ActiveSessions AS ( -- want the sessionWeek

    SELECT s.id AS sessionId,
           s.groupId AS groupId,
           s.date AS sessionDate,
           s.isPopUp,
           DATE_SUB(DATE(s.date), INTERVAL DAYOFWEEK(s.date)-1 DAY) as sessionWeek
      FROM sess s
)

SELECT
    ass.sessionWeek as "Week Cohort",
    SUM(case when am.currentActiveGroups = 1 then 1 else 0 end) as 'Members in 1 Group',
    SUM(case when am.currentActiveGroups = 2 then 1 else 0 end) as 'Members in 2 Groups',
    SUM(case when am.currentActiveGroups = 3 then 1 else 0 end) as 'Members in 3 Groups',
    SUM((case when am.currentActiveGroups = 1 then 1 else 0 end) +
        (case when am.currentActiveGroups = 2 then 1 else 0 end) +
        (case when am.currentActiveGroups = 3 then 1 else 0 end)) as 'Total'

FROM
    ActiveMembers am 

join ActiveSessions ass on ass.groupId = am.groupId

where
    ass.sessionWeek <= NOW()

group by    
    ass.sessionWeek 

order by   
    ass.sessionWeek desc 

LIMIT 12
